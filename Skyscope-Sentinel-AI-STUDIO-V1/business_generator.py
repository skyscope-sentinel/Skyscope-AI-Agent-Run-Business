import json
import os
from datetime import datetime
from typing import Any, Dict, List, Optional, TypedDict

# Placeholder for the AI agent from the swarms framework
# In a real implementation, this would be imported from the agent_manager or swarms library.
class Agent:
    def __init__(self, system_prompt: str, model_name: str = "gpt-4o"):
        self.system_prompt = system_prompt
        self.model_name = model_name
        print(f"Initialized Agent with model {self.model_name} and prompt: '{self.system_prompt[:50]}...'")

    def run(self, task: str, **kwargs) -> str:
        # This is a mock response. A real implementation would call the LLM.
        print(f"Agent running task: {task[:100]}...")
        if "generate a list of 5" in task:
            return json.dumps([
                {"idea": "AI-Powered Personalized Meal Planning Service", "description": "An app that uses AI to create weekly meal plans based on user's dietary needs, preferences, and available local ingredients."},
                {"idea": "Automated Code Review Assistant", "description": "A SaaS tool that integrates with GitHub to provide AI-driven code reviews, focusing on style, performance, and security."},
                {"idea": "Smart Gardening System for Urban Dwellers", "description": "A hardware and software kit that automates watering, lighting, and nutrient delivery for indoor plants."},
                {"idea": "AI-Generated Music for Content Creators", "description": "A platform offering royalty-free music tracks generated by AI, tailored to the mood and length of a video or podcast."},
                {"idea": "Virtual Reality Language Immersion Platform", "description": "An educational VR experience where users can practice a new language by interacting with AI characters in simulated real-world environments."}
            ])
        if "Create a detailed business plan" in task:
            return json.dumps({
                "executive_summary": "AI-Powered Personalized Meal Planning Service will revolutionize home cooking by providing hyper-personalized, affordable, and sustainable meal plans.",
                "company_description": "Our mission is to make healthy eating easy and accessible for everyone. We are a C-Corp based in Delaware.",
                "market_analysis": "The target market is busy professionals and families aged 25-45. The meal planning industry is growing at 12% YoY. Key competitors include PlateJoy and eMeals.",
                "organization_and_management": "The team will consist of a CEO, CTO, and a Head of Nutrition. We will operate with a flat organizational structure initially.",
                "service_or_product_line": "We offer a freemium mobile app. The free tier includes basic meal suggestions. The premium tier ($14.99/mo) offers advanced personalization, grocery list integration, and waste reduction analytics.",
                "marketing_and_sales_strategy": "Our strategy includes content marketing via a food blog, partnerships with fitness influencers, and targeted social media ads.",
                "financial_projections": "We project reaching 10,000 premium subscribers within the first two years, generating $1.8M in annual recurring revenue. Initial startup costs are estimated at $150,000."
            })
        if "Outline a detailed, phased execution plan" in task:
            return json.dumps({
                "Phase 1: Foundation (Weeks 1-2)": [
                    "Register the business as an LLC.",
                    "Open a business bank account.",
                    "Secure domain name and social media handles.",
                    "Develop initial branding guidelines (logo, color palette)."
                ],
                "Phase 2: MVP Development & Pre-Launch (Weeks 3-8)": [
                    "Develop the core features of the mobile app.",
                    "Integrate with a nutrition database API.",
                    "Set up a landing page to collect emails for a waitlist.",
                    "Begin content marketing efforts to build an audience."
                ],
                "Phase 3: Launch & Initial Marketing (Weeks 9-12)": [
                    "Launch the app on iOS and Android app stores.",
                    "Execute initial marketing campaigns with influencer partnerships.",
                    "Gather user feedback and iterate on the app.",
                    "Set up customer support channels."
                ],
                "Phase 4: Growth & Scaling (Months 4+)": [
                    "Analyze user data to improve the AI personalization algorithm.",
                    "Explore partnerships with grocery delivery services.",
                    "Expand marketing efforts based on successful channels.",
                    "Hire additional staff as user base grows."
                ]
            })
        return "This is a mock response from the AI agent."

# --- Data Structures ---

class BusinessPlan(TypedDict):
    """A structured dictionary representing a complete business plan."""
    executive_summary: str
    company_description: str
    market_analysis: str
    organization_and_management: str
    service_or_product_line: str
    marketing_and_sales_strategy: str
    financial_projections: str

class ExecutionSteps(TypedDict):
    """A structured dictionary for the phased execution plan."""
    phase_1: List[str]
    phase_2: List[str]
    phase_3: List[str]
    phase_4: List[str]

# --- Main Class ---

class BusinessGenerator:
    """
    An AI-powered module to generate autonomous business ideas, plans, and execution strategies.
    """

    def __init__(self, model_name: str = "gpt-4o"):
        """
        Initializes the BusinessGenerator with a specified AI model.

        Args:
            model_name (str): The name of the language model to use for generation tasks.
        """
        self.agent = Agent(
            system_prompt="You are a world-class business strategist, startup incubator, and financial analyst. Your goal is to generate innovative, viable, and detailed business concepts. Provide clear, structured, and actionable information.",
            model_name=model_name
        )

    def generate_ideas(self, theme: str, count: int = 5, zero_cost_focus: bool = False) -> List[Dict[str, str]]:
        """
        Generates a list of business ideas based on a given theme.

        Args:
            theme (str): The central theme or industry for the business ideas (e.g., "sustainable technology").
            count (int): The number of ideas to generate.
            zero_cost_focus (bool): If True, focuses on ideas with minimal to no startup costs.

        Returns:
            A list of dictionaries, where each dictionary contains an 'idea' and a 'description'.
        """
        focus = "that require little to no upfront financial investment and can be started quickly to generate profit" if zero_cost_focus else ""
        prompt = (
            f"Generate a list of {count} innovative and viable business ideas related to the theme of '{theme}'. "
            f"For each idea, provide a short, compelling description. {focus}. "
            "Return the list as a JSON array of objects, with each object having 'idea' and 'description' keys."
        )
        try:
            response = self.agent.run(prompt)
            ideas = json.loads(response)
            if isinstance(ideas, list):
                return ideas
            return []
        except (json.JSONDecodeError, TypeError):
            print("Error: Failed to decode JSON response from the agent.")
            return []

    def create_business_plan(self, business_idea: str, company_name: str) -> Optional[BusinessPlan]:
        """
        Creates a detailed business plan for a given idea.

        Args:
            business_idea (str): The business concept to develop a plan for.
            company_name (str): The proposed name for the company.

        Returns:
            A BusinessPlan object containing all sections of the plan, or None if generation fails.
        """
        prompt = (
            f"Create a detailed business plan for the company '{company_name}', which is based on the following idea: '{business_idea}'. "
            "The plan should include the following sections: "
            "1. executive_summary: A compelling summary of the business. "
            "2. company_description: Mission, vision, and legal structure. "
            "3. market_analysis: Industry overview, target audience, and competitive landscape. "
            "4. organization_and_management: The ideal founding team structure. "
            "5. service_or_product_line: A detailed description of the products or services. "
            "6. marketing_and_sales_strategy: Actionable strategies for customer acquisition. "
            "7. financial_projections: High-level estimated startup costs, revenue model, and 2-year profit forecast. "
            "Return the entire plan as a single JSON object with keys corresponding to the section names."
        )
        try:
            response = self.agent.run(prompt)
            plan_data = json.loads(response)
            # Validate that all keys are present
            required_keys = BusinessPlan.__required_keys__
            if all(key in plan_data for key in required_keys):
                return plan_data
            else:
                print("Error: The generated business plan is missing required sections.")
                return None
        except (json.JSONDecodeError, TypeError):
            print("Error: Failed to decode JSON response for the business plan.")
            return None

    def outline_execution_steps(self, business_idea: str) -> Optional[Dict[str, List[str]]]:
        """
        Outlines a phased, step-by-step execution plan for launching the business.

        Args:
            business_idea (str): The business concept to create an action plan for.

        Returns:
            A dictionary with phases as keys and lists of action items as values, or None if generation fails.
        """
        prompt = (
            f"Outline a detailed, phased execution plan to launch a business based on this idea: '{business_idea}'. "
            "Structure the plan into four phases with clear, actionable steps in each. The phases should be: "
            "'Phase 1: Foundation (Weeks 1-2)', "
            "'Phase 2: MVP Development & Pre-Launch (Weeks 3-8)', "
            "'Phase 3: Launch & Initial Marketing (Weeks 9-12)', and "
            "'Phase 4: Growth & Scaling (Months 4+)'. "
            "Return the plan as a single JSON object where keys are the phase names."
        )
        try:
            response = self.agent.run(prompt)
            steps = json.loads(response)
            if isinstance(steps, dict):
                return steps
            return None
        except (json.JSONDecodeError, TypeError):
            print("Error: Failed to decode JSON response for the execution steps.")
            return None

    @staticmethod
    def save_plan_to_markdown(
        company_name: str,
        idea: str,
        plan: BusinessPlan,
        steps: Dict[str, List[str]],
        directory: str = "business_proposals"
    ) -> str:
        """
        Saves the complete business proposal to a formatted Markdown file.

        Args:
            company_name (str): The name of the company.
            idea (str): The core business idea.
            plan (BusinessPlan): The generated business plan.
            steps (Dict[str, List[str]]): The generated execution steps.
            directory (str): The directory to save the file in.

        Returns:
            The file path of the saved Markdown file.
        """
        if not os.path.exists(directory):
            os.makedirs(directory)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        safe_company_name = "".join(c for c in company_name if c.isalnum() or c in (' ', '_')).rstrip()
        file_path = os.path.join(directory, f"{safe_company_name}_{timestamp}.md")

        content = f"# Business Proposal: {company_name}\n\n"
        content += f"**Core Idea:** {idea}\n\n"
        content += "---\n\n"

        # Add Business Plan sections
        content += "## Business Plan\n\n"
        for key, value in plan.items():
            section_title = key.replace('_', ' ').title()
            content += f"### {section_title}\n"
            content += f"{value}\n\n"

        content += "---\n\n"

        # Add Execution Steps
        content += "## Execution Plan\n\n"
        for phase, tasks in steps.items():
            content += f"### {phase}\n"
            for task in tasks:
                content += f"- [ ] {task}\n"
            content += "\n"

        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

        return file_path

    def generate_full_business_proposal(self, theme: str, company_name: str) -> Optional[str]:
        """
        Runs the full cycle from idea generation to a saved business proposal.

        Args:
            theme (str): The theme for the business idea.
            company_name (str): The proposed name for the company.

        Returns:
            The file path of the saved proposal, or None if any step fails.
        """
        print(f"Generating business proposal for '{company_name}' with theme '{theme}'...")

        # 1. Generate ideas
        ideas = self.generate_ideas(theme, count=1)
        if not ideas:
            print("Failed to generate a business idea.")
            return None
        business_idea = ideas[0]['idea']
        print(f"Generated Idea: {business_idea}")

        # 2. Create business plan
        plan = self.create_business_plan(business_idea, company_name)
        if not plan:
            print("Failed to create a business plan.")
            return None
        print("Successfully generated business plan.")

        # 3. Outline execution steps
        steps = self.outline_execution_steps(business_idea)
        if not steps:
            print("Failed to outline execution steps.")
            return None
        print("Successfully generated execution steps.")

        # 4. Save the full proposal to a file
        file_path = self.save_plan_to_markdown(company_name, business_idea, plan, steps)
        print(f"Full business proposal saved to: {file_path}")

        return file_path


if __name__ == '__main__':
    # Example usage of the BusinessGenerator
    generator = BusinessGenerator(model_name="mock_model")

    # --- Example 1: Generate a full proposal for a new tech company ---
    print("--- Running Full Proposal Generation ---")
    proposal_path = generator.generate_full_business_proposal(
        theme="AI in personalized education",
        company_name="EduVerse AI"
    )
    if proposal_path:
        print(f"\n✅ Full proposal generation successful. File at: {proposal_path}")
        # You can open the file to see the result
        # with open(proposal_path, 'r') as f:
        #     print(f.read())
    else:
        print("\n❌ Full proposal generation failed.")

    print("\n" + "="*50 + "\n")

    # --- Example 2: Generate zero-cost business ideas ---
    print("--- Generating Zero-Cost Business Ideas ---")
    zero_cost_ideas = generator.generate_ideas(
        theme="digital content creation",
        count=3,
        zero_cost_focus=True
    )
    if zero_cost_ideas:
        print("Generated Zero-Cost Ideas:")
        for i, idea_info in enumerate(zero_cost_ideas, 1):
            print(f"{i}. {idea_info['idea']}: {idea_info['description']}")
    else:
        print("❌ Failed to generate zero-cost ideas.")
